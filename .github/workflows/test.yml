name: Test
permissions:
  contents: read
on:
  push:
    branches: [main, develop, "fix/*"]
  pull_request:
    branches: [main, develop]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.NX_CACHE_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.NX_CACHE_AWS_SECRET_ACCESS_KEY }}

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [24.x]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Print base and head SHAs
        run: |
          echo "BASE: ${{ env.NX_BASE }}"
          echo "HEAD: ${{ env.NX_HEAD }}"

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Disable TCP/UDP Offloading
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo ethtool -K eth0 tx off rx off
            exit 0
          elif [ "$RUNNER_OS" == "macOS" ]; then
            sudo sysctl -w net.link.generic.system.hwcksum_tx=0
            sudo sysctl -w net.link.generic.system.hwcksum_rx=0
            exit 0
          else
            echo "$RUNNER_OS not supported"
            exit 0
          fi

      - name: Install repo dependencies
        run: yarn install --network-timeout 1000000 --frozen-lockfile

      - name: Install mkcert tool
        run: |
            if [ "$RUNNER_OS" == "Linux" ]; then
                sudo apt-get install -y libnss3-tools
                curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
                chmod +x mkcert-v*-linux-amd64
                sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert
            elif [ "$RUNNER_OS" == "macOS" ]; then
                brew install mkcert nss
            else
                echo "$RUNNER_OS not supported"
                exit 0
            fi;
            mkcert -install;

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('@playwright/test/package.json').version)")" >> $GITHUB_ENV

      - name: Cache Playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install Playwright with dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps

      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: yarn playwright install-deps

      - name: Unit test the Dev Suite
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          CI: true
        run: yarn nx affected --target=test --parallel=1 --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

      - name: Execute end-to-end tests
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          CI: true
        run: yarn nx affected --target=e2e --parallel=1 --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
