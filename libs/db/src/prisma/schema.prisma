generator client {
    provider        = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("KLAVE_MONGODB_URL")
}

model Environment {
    id        String   @id @default(uuid()) @map("_id")
    name      String
    value     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    id          String       @id @default(uuid()) @map("_id")
    sid         String       @unique
    data        String
    expiresAt   DateTime
    githubToken GitHubToken?
}

type GitHubToken {
    accessToken           String
    expiresIn             Int
    refreshToken          String
    refreshTokenExpiresIn Int
    tokenType             String @default("bearer")
    scope                 String
    createdAt             String
}

model Organisation {
    id                 String              @id @default(uuid()) @map("_id")
    slug               String              @unique
    kredits            BigInt              @default(0)
    personal           Boolean             @default(false)
    creator            User?               @relation(fields: [creatorId], references: [id])
    creatorId          String?
    applications       Application[]
    permissionGrants   PermissionGrant[]
    creditPurchases    CreditPurchase[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    deletedAt          DateTime?
    clusterAllocations ClusterAllocation[]
}

model CreditPurchase {
    id                    String       @id @default(uuid()) @map("_id")
    organisation          Organisation @relation(fields: [organisationId], references: [id])
    organisationId        String
    checkoutSessionId     String
    checkoutSessionStatus String
    setteled              Boolean      @default(false)
    createdAt             DateTime     @default(now())
    updatedAt             DateTime     @updatedAt
}

model User {
    id                        String              @id @default(uuid()) @map("_id")
    loginCode                 String?
    loginCodeCreatedAt        DateTime?
    webauthChallenge          String?
    webauthChallengeCreatedAt DateTime?
    slug                      String              @unique
    emails                    String[]            @default([])
    createdAt                 DateTime            @default(now())
    updatedAt                 DateTime            @updatedAt
    globalAdmin               Boolean?            @default(false)
    webauthCredentials        WebauthCredential[]
    permissionGrants          PermissionGrant[]
    createdOrganisations      Organisation[]
}

model WebauthCredential {
    id                   String   @id @default(uuid()) @map("_id")
    user                 User     @relation(fields: [userId], references: [id])
    userId               String
    credentialID         String
    credentialPublicKey  Int[]
    credentialType       String
    credentialDeviceType String
    credentialBackedUp   Boolean
    credentialTransport  String?
    userVerified         Boolean
    aaguid               String
    counter              Int
    lastUsedAt           DateTime @default(now())
}

enum CodeSource {
    github
}

enum HookProcessingStatus {
    idle
    running
    done
}

model Hook {
    id        String               @id @default(uuid()) @map("_id")
    source    CodeSource
    event     String
    remoteId  String
    status    HookProcessingStatus @default(idle)
    payload   Json
    createdAt DateTime             @default(now())
}

model Repo {
    id            String        @id @default(uuid()) @map("_id")
    source        CodeSource
    owner         String
    name          String
    defaultBranch String?
    config        Json
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    applications  Application[]

    @@unique([source, owner, name])
}

enum CompilationStageType {
    checkout
    linking
    typecheck
    export
}

enum DeploymentStatus {
    created
    compiling
    compiled
    deploying
    deployed
    updating
    terminating
    terminated
    errored
}

enum DeploymentLifespan {
    short
    long
}

enum CommitVerificationReason {
    expired_key
    not_signing_key
    gpgverify_error
    gpgverify_unavailable
    unsigned
    unknown_signature_type
    no_user
    unverified_email
    bad_email
    unknown_key
    malformed_signature
    invalid
    valid
    unknown
}

type CommitVerification {
    verified  Boolean
    reason    CommitVerificationReason?
    signature String?
    payload   String?
}

type Commit {
    source       CodeSource
    sha          String
    message      String
    author       String?
    date         DateTime
    parents      String[]
    verification CommitVerification?
}

model Cluster {
    id                 String              @id @default(uuid()) @map("_id")
    fqdn               String
    name               String
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    deletedAt          DateTime?
    clusterAllocations ClusterAllocation[]
}

model ClusterAllocation {
    id             String        @id @default(uuid()) @map("_id")
    cluster        Cluster       @relation(fields: [clusterId], references: [id])
    clusterId      String
    organisation   Organisation? @relation(fields: [organisationId], references: [id])
    organisationId String?
    read           Boolean
    write          Boolean
    admin          Boolean
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    deletedAt      DateTime?
}

model Deployment {
    id                   String             @id @default(uuid()) @map("_id")
    deploymentAddress    DeploymentAddress?
    set                  String
    branch               String?
    version              String?
    build                String?
    commit               Commit?
    locations            String[]           @default([])
    status               DeploymentStatus   @default(created)
    life                 DeploymentLifespan @default(short)
    sealed               Boolean            @default(false)
    tags                 String[]           @default([])
    expiresOn            DateTime
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
    application          Application        @relation(fields: [applicationId], references: [id], onDelete: Cascade)
    applicationId        String
    sourceType           String?
    buildOutputs         Json?
    buildOutputWIT       String?
    buildOutputDTS       String?
    buildOutputWAT       String?
    buildOutputWASM      String?
    buildOutputHasUI     Boolean?
    buildOutputRoutes    String[]           @default([])
    buildOutputStdOut    String?
    buildOutputStdErr    String?
    buildOutputErrorObj  Json?
    dependenciesManifest Json?
    contractFunctions    String[]           @default([])
    configSnapshot       Json?
}

model DeploymentAddress {
    id           String     @id @default(uuid()) @map("_id")
    fqdn         String
    deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
    deploymentId String     @unique
    createdAt    DateTime   @default(now())
}

model Domain {
    id            String       @id @default(uuid()) @map("_id")
    fqdn          String
    token         String
    verified      Boolean
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    deletedAt     DateTime?
    application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
    applicationId String?
}

enum ActivityLogClass {
    pushHook
    pullRequestHook
    deployment
    domain
    environment
    listing
}

type ActivityLogRecord {
    type    String
    payload Json
}

model ActivityLog {
    id            String            @id @default(uuid()) @map("_id")
    application   Application       @relation(fields: [applicationId], references: [id], onDelete: NoAction)
    applicationId String
    class         ActivityLogClass
    context       ActivityLogRecord
    createdAt     DateTime          @default(now())
}

type Limits {
    queryCallSpend       BigInt @default(0)
    transactionCallSpend BigInt @default(0)
}

model Application {
    id                  String            @id @default(uuid()) @map("_id")
    slug                String
    domains             Domain[]
    license             String?
    description         String?
    webhook             String?
    homepage            String?
    gitSignRequired     Boolean           @default(false)
    deployCommitLedgers Boolean           @default(false)
    limits              Limits
    kredits             BigInt            @default(0)
    catogories          String[]          @default([])
    tags                String[]          @default([])
    repo                Repo              @relation(fields: [repoId], references: [id])
    repoId              String
    deployments         Deployment[]
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt
    deletedAt           DateTime?
    activityLog         ActivityLog[]
    permissionGrants    PermissionGrant[]
    organisation        Organisation      @relation(fields: [organisationId], references: [id])
    organisationId      String

    @@unique([organisationId, slug, deletedAt])
}

model PermissionGrant {
    id             String        @id @default(uuid()) @map("_id")
    user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    organisation   Organisation? @relation(fields: [organisationId], references: [id], onDelete: Cascade)
    organisationId String?
    application    Application?  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
    applicationId  String?
    read           Boolean
    write          Boolean
    admin          Boolean
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    deletedAt      DateTime?
}

enum InstallationAccountType {
    unknown
    user
    bot
    organization
}

model Installation {
    id          String                  @id @default(uuid()) @map("_id")
    source      CodeSource
    hookPayload Json
    remoteId    String
    account     String
    accountType InstallationAccountType
    createdAt   DateTime                @default(now())
    updatedAt   DateTime                @updatedAt
    deletedAt   DateTime?

    @@unique([source, remoteId, account])
}

model Repository {
    id                   String     @id @default(uuid()) @map("_id")
    source               CodeSource
    installationPayload  Json
    installationRemoteId String
    remoteId             String
    owner                String
    name                 String
    fullName             String
    defaultBranch        String?
    private              Boolean
    createdAt            DateTime   @default(now())
    updatedAt            DateTime   @updatedAt
    deletedAt            DateTime?

    @@unique([source, remoteId, installationRemoteId])
}

enum UsageType {
    usage
}

type UsageDataConsumption {
    cluster_key              String
    node_key                 String
    app_id                   String
    fqdn                     String
    wasm_hash                String
    request_id               String
    call_type                String
    is_transaction           Boolean
    timestamp                Int
    cpu_consumption          Int
    native_calls_consumption Int
    ingress_in_bytes         Int
    egress_in_bytes          Int
    ledger_write_in_bytes    Int
    ledger_read_in_bytes     Int
}

type UsageData {
    version       Int
    consumption   UsageDataConsumption
    signature_b64 String
}

model UsageRecord {
    id        String    @id @default(uuid()) @map("_id")
    type      UsageType
    timestamp String
    data      UsageData
}

enum CouponType {
    introductory
    launch
}

model Coupon {
    id         String     @id @default(uuid()) @map("_id")
    code       String     @unique
    kredits    BigInt
    type       CouponType
    userId     String?
    used       Boolean    @default(false)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    redeemedAt DateTime?
}
